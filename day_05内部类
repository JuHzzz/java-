<内部类的创建>

    1.如果想在外部类的非静态方法的任意位置创建一个内部类的对象，那么需要具体的指明这个对象的类型：OuterClassName.InnerClassName.
    2.当创建了一个内部类对象时，那么这个内部类对象就和他的外围类之间就产生了某种联系，内部类可以访问外围类所有成员，而不需要
    任何条件。此外，它还拥有了对外围类所有元素的访问权。
    3.当某个外围类的对象创建了它内部类的对象时，这个内部类的对象就会秘密的获得一个指向其外部类对象的引用，通过这个引用就可以访问外围类的成员
    4.内部类对象只能在与其外围类对象相关联的时候才能被创建（内部类非Static），构建内部类对象需要一个指向其外部类对象的引用。
    5.在创建外围类对象之前是不可能创建内部类对象的，这是因为内部类对象会暗暗链接到创建他的外部类对象上。（内部类的对象实际上相当于是外围类的一个成员）。
    
<嵌套类>
  
    1.如果不需要内部类对象与其外围类对象之间有联系，那么可以将内部类声明为static。这通常称为嵌套类。普通的内部类隐式地保存了一个外部类的引用，而static
    类型的类是属于类而存在的，这意味着：①要创建嵌套类的对象，并不需要其外围类的对象 ②不能从嵌套类的对象中访问非静态的外围类对象。
    2.正常情况下，不能在接口内部放置任何代码，但嵌套类可以作为接口的一部分。放到接口中的任何类都默认是public static的，变量是public static final 的。
    
<使用内部类的原因> 
  
    1.每个内部类都能独立的继承在一个（接口的）实现，所以无论外围类是否已经继承了（接口的）实现，对于内部类都是没有影响的；
    2.它使得多重继承的解决方案变得完整。
        --如果拥有的是抽象的类或具体的类，而不是接口，那就只能使用内部类才能实现多重继承；
        (多重继承：是值得是一个类继承另一个类，而这个另一个类还可以继承另外一个类。如类A继承类B，类B还可以继承类C，要把它和多继承区别开，Java都是单继承的)
        --如果使用内部类：
            ① 内部类可以有多个实例，每个实例都有自己的状态信息，并且与其外围类的信息相互独立；
            ② 在单个外围类中，可以让多个内部类继承同一个类，或者实现同一个接口；
            ③ 创建内部类对象的时刻并不依赖于外围类对象的创建；
            ④ 内部类不具有“is-a”关系，每个内部类都是相互独立的一个存在。
     
<内部类与控制框架>
    
     1.控制框架：被设计用以解决某类特定问题的一个类或一组类。要运用某个应用程序框架，通常是继承一个或一组类，并覆盖某些方法。
     2.模板方法方法包含算法的基本结构，并且会调用一个或多个可覆盖的方法，来完成算法的动作。设计模式总是将不变的事物和可变的事物分离开，所以在模板模式中，
     算法就是保持不变的事物，可覆盖的方法就是可变的事物。
     
     内部类允许：
        1.控制框架的完整实现是由单个的类创建的，从而使得实现的细节被封装了起来。内部类用来表示实现不同的行为；
        2.因为内部类可以很方便的访问外围类的成员，所以使得这种模式的实现变得更加可靠。
        
        
        
         ------以上均为个人的理解，如果有误，烦请各位指正，共同努力进步-------
