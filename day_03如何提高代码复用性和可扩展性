<复用代码>
  1.组合：只需在新的类中创建现有类的对象，这种方法比较灵活，这种技术经常用于仅仅只是想要使用现有类的功能而非它的接口。即，在新类中使用创建现有类的private
  对象，使这个对象实现现有类的功能，但新类的用户看到的仅仅是为新类所定义的接口，而非所嵌入对象的接口。
  2.继承：按照现有类的类型创建新类，并且无需改变现有类的类型，采用现有类的形式并在其中添加新的代码，通过extends关键字实现继承。
  组合和继承：两者都能从现有类生成新类型，但组合只需要在新类中实现现有类的功能即可，它一般是将现有类当做是新类底层的一部分实现来加以复用；而继承实现的是接口
  的复用。
  3.多态：在继承关系中，一个基类可以拥有多个子类，这些个子类都可以在基类的基础上加以扩展根据需要添加新的功能实现，这些子类是基类的延伸，他们是本身的同时，也可以
  说是基类的一种类型，通过向上转型，子类可以转换成基类类型，这就大大提高了程序的可扩展性，消除了类型之间的耦合。
      ----多态的定义：基类中的方法在子类中可以有多种的表现形式
      ----多态的作用：消除耦合
      ----多态的技术：后期绑定（动态绑定）
      ----多态的条件：继承，方法的重写，根据需要父类的引用指向不同的子类对象
      
<构造器调用顺序>
  
  1.调用基类构造器。
  2.按声明顺序调用成员的初始化方法。
  3.调用子类构造器的主体。

<初始化顺序>
 
  1.在其他任何事物发生之前，将分配给对象的存储空间初始化为二进制的零；
  2.按构造器调用顺序调用构造器；
  3.按照声明的顺序调用成员的初始化方法；
  4.调用子类的构造器主体。
  这样做可以使得我的程序在运行时都至少初始化为零，减少了运行时异常的发生。

<抽象类和抽象方法>
 
  抽象方法：方法只有声明而没有具体的实现；
  抽象类：包含抽象方法的类叫做抽象类，但不能说抽象类一定包含抽象方法，抽象类可以进行实例化，但是并不是直接通过new来进行实例化，而是通过向上转型，在
  创建子类的实例化对象时，会首先调用基类的构造方法，通过父类的应用指向子类的实例间接的对子类进行实例化，因此抽象类是含有构造方法的。
  
 <接口>
    
    1.通过interface 这个关键字来创建接口，这个关键字会产生一个完全抽象的类，它根本没有提供任何实现。允许创建方法名，返回类型，参数列表，但是没有任何
    方法体，此外，他还没有构造方法。（只提供形式，不提供实现）
    2.接口中的方法类型，默认为是public的，也可以显示的写上去。
    
    ------使用接口的原因是什么？
      1.为了能够向上转型为多个基类型，提高灵活性；
      2.防止客户端程序员创建该类的对象，确保这仅仅是一个接口。
    ------那么我们何时使用接口？何时使用抽象类呢？
      如果我们仅仅是想要得到一个方法，然后自己来实现这个方法，那么使用接口会更灵活一些；如果我们如果要创建含有成员变量，还有方法定义的基类，那么使用抽象类
      会更好一些。
    
    
    
    
    ------以上均为个人的理解，如果有误，烦请各位指正，共同努力进步-------
  
  
  
