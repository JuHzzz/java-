<一>.抽象过程
   
   1.所有编程语言都提供抽象机制。可以认为，人们所能够解决问题的复杂性依赖于抽象的类型和质量。所谓的“类型”指的是“所抽象的是什么？”比如汇编语言，
 它是对机器的简单抽象，在这个基础之上，出现的"命令式"语言如（Pascal,C）则是对汇编语言的抽象；但是他们所做的抽象仍然是要求在解决问题时要依赖于
 计算机的内部结构，而不是基于所要解决的问题的结构来考虑。
    2.程序员必须建立起在机器模型（位于“解空间”内，这是对问题建模的地方，如计算机）和实际待解决问题模型（位于“问题空间”内，这是问题存在的地方）
 之间的关联。
    3.我们将问题空间中的元素和它在解空间中的表示称为“对象”。
        ---1.万物皆对象：每个对象都可以拥有自己的属性和行为（它可以存储数据也可以对自身进行一些操作）；
        ---2.程序是对象的集合，他们通过发送消息告诉彼此想要做的：可以把消息想象为某个特定对象的方法的调用请求；
        ---3.每个对象都有自己的由其他对象所构成的存储：我们可以创建一个对象A，当我们再创建另外一个对象B的时候，可以在对象B中创建对象A的一个实例，
             因此我们可以在程序中构建复杂的体系，同时将其复杂性隐藏在对象的简单性背后；
        ---4.每个对象都拥有其类型。（每个对象都是某个类（class）的一个实例（instance））；
        ---5.某一特定类型的所有对象都可以接受同样的消息。（多态）
        对象具有状态，行为和标识。这意味着每一个对象都可以拥有其内部数据和方法，并且每一个对象都可以唯一的与其他的对象区分开来（内存地址唯一）。

<二>.每个对象都有一个接口
    
    1.对象是类的实例，类是具有相同属性和行为的对象的集合（因为类描述了具有相同特性（数据元素）和行为（功能）的对象集合）；
     
    2.面向对象程序设计：就是在问题空间和解空间之间建立一一对应的映射关系；
     
    3.在类型中，每一个可能的请求都有一个方法与之相关联，当向对象发送请求时，就会调用这个与之相关联的方法（当某个对象接收到从外界发来的请求时，
       从中获取到该请求的目的，从而找出与之相对应的方法来执行）。
       
<三>.访问控制
     
     1.程序开发人员可以分为：类创建者（创建新数据类型）和客户端开发人员（使用这些新数据类型）；   
   
     2.访问控制存在的原因：
            ----1.当客户端程序员在进行程序设计时，需要使用类创建者创建的数据类型时，并不是所有的接口都是需要的，将那些涉及到对数据类型的内部操作
            的接口加以控制，就可以避免在程序可发过程中产生的Bug；
            ----2.当后台开发人员在创建完新的数据类型后，可以正常实现所需的功能，可是当需要进行代码调优时，在不影响整个程序的功能的前提下，分离和
            保护接口和实现，就可以修改需要调优的架构而不影响整块功能。
     3.Java通过三个关键字来进行访问控制：
             ----1.public：允许任何人访问；
             ----2.protected：允许当前对象本身和其子类进行访问。
             ----3.private：只允许当前对象本身及其内部方法进行访问。
             ----4.此外，Java还有一种默认的访问权限，在同一个包中可以进行访问，在包外与Private相一致。
             
 <四>.复用具体实现
        
      1.最常见的复用就是在类中创建本类的一个实例对象，也可以创建一个新类，根据需要，可以设置任意数量，任意类型的新类的对象，并封装到之前创建的某
      一个类中，这就是“组合”的概念.意思就是说，如果有一辆车，我这辆车本身就是一个对象，而这个对象内部一个包括其他对象，如引擎对象，轮胎对象，等。
      2.如果可以根据需要，动态的创建对象，就是“聚合”的概念，这会使程序开发具有更好地灵活性。
      
 <五>.继承
        
      1.当用户创建了一个类之后，这个类本身中含有很多方法（功能），比如当存在一个Peson类，这个类中有一些方法，规定人可以走路，交流，吃饭等，此时，
      我根据需求需要创建一个Student类，这个类中学生具有和Person类相同的行为（方法），我就可以在Person类的基础上，以它为副本根据需要可以添加或者
      修改，通过继承，减少了开发过程中的麻烦；但也存在弊端：当父类需要修改是，其子类中继承过来的对应的方法也需要修改。
      2.类型不仅仅只是描述了作用于一个对象集合上的一个约束条件，同时还有于其他类型之间的关系。两个类型可以有相同的属性和行为，当时其中一个类型可能
      比另一个类型拥有更多的属性和行为。一个子类中包含有父类所共享的特性和行为。
      3.当接收到一个请求时，子类和基类具有相同的属性和行为，那么一定会使一段代码运行，如果仅仅是在类型继承而不做出更多的反应或者添加更多的方法，那么
      这个继承是没有意义的。那么我就可以通过在子类中添加新的方法，或者将父类的方法的覆盖，就可以使子类和基类具有一定的差异性。
      
  <六>.伴随多态的可互换对象
      
      1.通过导出新的子类型而轻松扩展设计的能力是进行封装的基本方式之一。
      2.函数分为“前期绑定”和后期绑定：所谓“前期绑定”指的是非面向对象的程序的函数在调用时，会生成函数名的调用，当程序运行时，会将这个调用解析到函数的
      绝对地址；“后期绑定”指的是OOP程序直到运行的时候才能确定代码的地址。
      3.Java通过一小段代码，这段代码使用在对象中存储的信息来计算出方法的地址，根据这一小段代码，每一个对象都可以具有不同的行为表型。
      4.多态：当创建一个类之后，这个类中包含某种方法，而这个方法在它的子类中又被继承和实现，每一个子类对象都会根据自己的需求返回不同的参数类型或结果，
      就称为多态。多态也是区分面向对象和基于对象的一个标准。
      5.向上转型
      
   <七>.单根继承机构
   
       --在Java中，所有的对象都有一个相同的基类（Object）,这种结构使得所有的类都具备某些相同的功能，比如对象需要在堆中进行创建，每一个类或对象都有
       自己的类型信息，这为垃圾回收处理带来了很好的便利。
       
   <八>.容器（集合）和参数化类型
   
      1.Java中提供了不同的容器：List（用于存储序列），Map(也被称为关联数组，用来建立对象之间的关联)，Set(没中对象类型只持有一个)
      2.根据需要，不用的容器提供了不同类型和接口的行为
      3.不同的容器对于某些操作具有不同的效率
      4.当子类需要使用基类的类型时，只需要进行向上转型即可，但当基类需要子类的类型时，就需要进行向下转型，但这是不安全的，因为不确定需要转换成什么样的 
      子类类型，对于这个问题，Java提供了泛型来解决向下转型带来的不安全性问题。
      
      
      
 
  ------以上均为个人的理解，如果有误，烦请各位指正，共同努力进步-------
 
 
  
